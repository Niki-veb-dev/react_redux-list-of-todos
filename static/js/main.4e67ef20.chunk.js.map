{"version":3,"sources":["store/actions.ts","store/index.ts","store/selectors.ts","api/api.ts","components/SearchTodo/SearchTodo.tsx","components/TodoList/TodoList.tsx","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["LOAD_TODOS","LOAD_USER","LOAD_USER_ERROR","ADD_USER_ID","loadHasErrorAction","payload","type","selectUserId","initialState","todos","user","error","selectedUserId","store","createStore","state","action","composeWithDevTools","getError","getTodoSelector","getUserSelector","getSelectedUserId","API_URL","getUserById","userId","a","fetch","response","json","TodoStatus","deleteTodoFromServer","todoId","String","method","SearchTodo","query","todoStatus","handleChange","handleSelect","className","placeholder","name","value","onChange","event","target","TodoList","dispatch","useDispatch","useSelector","useState","ALL","setTodoStatus","filteredTodos","setFilteredTodos","setQuery","loadTodosFromServer","then","todoFromServer","console","log","useEffect","filteredTodo","status","filter","todo","completed","newTodos","ACTIVE","COMPLETED","loadData","handleCLick","handleDeleteTodo","input","map","title","toLocaleLowerCase","includes","classNames","htmlFor","id","checked","readOnly","onClick","CurrentUser","hasError","userFromServer","email","phone","App","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4e67ef20.chunk.js","sourcesContent":["import { Todo, User } from '../react-app-env';\n\nexport const LOAD_TODOS = 'LOAD_TODOS';\nexport const LOAD_USER = 'LOAD_USER';\nexport const LOAD_USER_ERROR = 'LOAD_USER_ERROR';\nexport const ADD_USER_ID = 'ADD_USER_ID';\n\nexport const loadTodosAction = (payload: Todo[]) => ({\n  type: LOAD_TODOS,\n  payload,\n});\n\nexport const loadUserAction = (payload: User) => ({\n  type: LOAD_USER,\n  payload,\n});\n\nexport const loadHasErrorAction = (payload: boolean) => ({\n  type: LOAD_USER_ERROR,\n  payload,\n});\n\nexport const selectUserId = (payload: number) => ({\n  type: ADD_USER_ID,\n  payload,\n});\n","// import thunk from 'redux-thunk';\nimport { createStore, AnyAction } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { RootState } from '../react-app-env';\nimport {\n  ADD_USER_ID, LOAD_TODOS, LOAD_USER, LOAD_USER_ERROR,\n} from './actions';\n\nconst initialState: RootState = {\n  todos: [],\n  user: null,\n  error: false,\n  selectedUserId: 0,\n};\n\nconst rootReducer = (state = initialState, action: AnyAction) => {\n  switch (action.type) {\n    case LOAD_TODOS:\n      return {\n        ...state,\n        todos: [...action.payload],\n      };\n\n    case LOAD_USER:\n      return {\n        ...state,\n        user: action.payload,\n      };\n\n    case LOAD_USER_ERROR:\n      return {\n        ...state,\n        user: null,\n        error: action.payload,\n      };\n\n    case ADD_USER_ID:\n      return {\n        ...state,\n        selectedUserId: action.payload,\n      };\n\n    default:\n      return state;\n  }\n};\n\n// The `store` should be passed to the <Provider store={store}> in `/src/index.tsx`\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(), // allows you to use http://extension.remotedev.io/\n);\n\nexport default store;\n","import { RootState } from '../react-app-env';\n\nexport const getError = (state: RootState) => state.error;\nexport const getTodoSelector = (state: RootState) => state.todos;\nexport const getUserSelector = (state: RootState) => state.user;\nexport const getSelectedUserId = (state: RootState) => state.selectedUserId;\n","import { Todo, User } from '../react-app-env';\n\nconst API_URL = 'https://mate.academy/students-api/';\n\nexport function getAllTodos(): Promise<Todo[]> {\n  return fetch(`${API_URL}todos`).then(response => response.json());\n}\n\nexport async function getUserById(userId: number): Promise<User> {\n  const response = await fetch(`${API_URL}users/${userId}`);\n\n  return response.json();\n}\n\nexport const deleteTodoFromServer = async (todoId: number) => {\n  await fetch(`${API_URL}/todos/${String(todoId)}`, {\n    method: 'DELETE',\n  });\n};\n","import React from 'react';\n\nenum TodoStatus {\n  ALL = 'all',\n  ACTIVE = 'active',\n  COMPLETED = 'completed',\n}\n\ntype Props = {\n  query: string,\n  todoStatus: TodoStatus,\n  handleChange: (input: string) => void,\n  handleSelect: (event: React.ChangeEvent<HTMLSelectElement>) => void,\n};\n\nexport const SearchTodo: React.FC<Props> = ({\n  query,\n  todoStatus,\n  handleChange,\n  handleSelect,\n}) => (\n  <form className=\"form\">\n    <input\n      className=\"input\"\n      type=\"text\"\n      placeholder=\"Text input\"\n      name=\"query\"\n      value={query}\n      onChange={(event) => handleChange(event.target.value)}\n    />\n    <div className=\"select\">\n      <select\n        name=\"todoStatus\"\n        value={todoStatus}\n        onChange={handleSelect}\n      >\n        <option value=\"all\">All</option>\n        <option value=\"active\">Active</option>\n        <option value=\"completed\">Completed</option>\n      </select>\n    </div>\n  </form>\n);\n","/* eslint-disable jsx-a11y/label-has-associated-control */\nimport React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport classNames from 'classnames';\nimport { getSelectedUserId, getTodoSelector } from '../../store/selectors';\nimport { loadTodosAction, selectUserId } from '../../store/actions';\nimport { deleteTodoFromServer, getAllTodos } from '../../api/api';\nimport { SearchTodo } from '../SearchTodo';\nimport './TodoList.scss';\nimport { Todo } from '../../react-app-env';\n\nenum TodoStatus {\n  ALL = 'all',\n  ACTIVE = 'active',\n  COMPLETED = 'completed',\n}\n\nexport const TodoList: React.FC = () => {\n  const dispatch = useDispatch();\n  const todos = useSelector(getTodoSelector);\n  const selectedUserId = useSelector(getSelectedUserId);\n  const [todoStatus, setTodoStatus] = useState(TodoStatus.ALL);\n  const [filteredTodos, setFilteredTodos] = useState<Todo[]>([]);\n  const [query, setQuery] = useState('');\n\n  const loadTodosFromServer = async () => {\n    const todoFromServer = await getAllTodos();\n\n    // eslint-disable-next-line no-console\n    console.log('render');\n\n    dispatch(loadTodosAction(todoFromServer));\n    setFilteredTodos(todoFromServer);\n  };\n\n  useEffect(() => {\n    loadTodosFromServer();\n  }, []);\n\n  const filteredTodo = (status: boolean) => {\n    const result = todos.filter(todo => todo.completed === status);\n\n    return result;\n  };\n\n  const loadData = () => {\n    let newTodos;\n\n    switch (todoStatus) {\n      case TodoStatus.ACTIVE:\n        newTodos = filteredTodo(true);\n        break;\n\n      case TodoStatus.COMPLETED:\n        newTodos = filteredTodo(false);\n        break;\n\n      default:\n        newTodos = [...todos];\n        break;\n    }\n\n    setFilteredTodos(newTodos);\n  };\n\n  useEffect(() => {\n    loadData();\n  }, [todoStatus]);\n\n  const handleSelect = async (event: React.ChangeEvent<HTMLSelectElement>) => {\n    if (event.target.value !== todoStatus) {\n      setTodoStatus(event.target.value as TodoStatus);\n    }\n  };\n\n  const handleCLick = async (userId: number) => {\n    if (selectedUserId !== userId) {\n      dispatch(selectUserId(userId));\n    }\n  };\n\n  const handleChange = (input: string) => {\n    setQuery(input);\n  };\n\n  const handleDeleteTodo = async (todoId: number) => {\n    // eslint-disable-next-line no-console\n    console.log('delete');\n    await deleteTodoFromServer(todoId);\n    loadTodosFromServer();\n  };\n\n  return (\n    <div className=\"TodoList\">\n      <SearchTodo\n        handleSelect={handleSelect}\n        todoStatus={todoStatus}\n        handleChange={handleChange}\n        query={query}\n\n      />\n      <button\n        type=\"button\"\n        className=\"button TodoList__user-button--selected\"\n      >\n        Randomizer\n      </button>\n      <h2>Todos:</h2>\n      <div className=\"TodoList__list-container\">\n        <ul className=\"TodoList__list\">\n          {filteredTodos.map(todo => {\n            if (todo.title.toLocaleLowerCase().includes(query)) {\n              return (\n                (\n                  <li\n                    key={todo.id}\n                    className={classNames(\n                      'TodoList__item ',\n                      {\n                        'TodoList__item--unchecked': !todo.completed,\n                        'TodoList__item--checked': todo.completed,\n                      },\n                    )}\n                  >\n                    <label htmlFor={`${todo.id}`}>\n                      <input\n                        type=\"checkbox\"\n                        checked={todo.completed}\n                        id={`${todo.id}`}\n                        readOnly\n                      />\n                      <p>\n                        {todo.title}\n                      </p>\n                    </label>\n                    <div>\n                      <button\n                        className={classNames(\n                          'button',\n                          'TodoList__user-button',\n                          {\n                            'TodoList__user-button--selected': todo.userId === selectedUserId\n                          || selectedUserId === 0,\n                          },\n                        )}\n                        type=\"button\"\n                        onClick={() => handleDeleteTodo(todo.id)}\n                      >\n                        DELETE\n                      </button>\n                      <button\n                        className={classNames(\n                          'button',\n                          'TodoList__user-button',\n                          {\n                            'TodoList__user-button--selected': todo.userId === selectedUserId\n                          || selectedUserId === 0,\n                          },\n                        )}\n                        type=\"button\"\n                        onClick={() => handleCLick(todo.userId)}\n                      >\n                        {`User #${todo.userId}`}\n                      </button>\n                    </div>\n                  </li>\n                )\n              );\n            }\n\n            return null;\n          })}\n        </ul>\n      </div>\n    </div>\n  );\n};\n","import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getUserById } from '../../api/api';\nimport { loadHasErrorAction, loadUserAction, selectUserId } from '../../store/actions';\nimport { getError, getSelectedUserId, getUserSelector } from '../../store/selectors';\nimport './CurrentUser.scss';\n\nexport const CurrentUser: React.FC = () => {\n  const dispatch = useDispatch();\n  const hasError = useSelector(getError);\n  const user = useSelector(getUserSelector);\n  const selectedUserId = useSelector(getSelectedUserId);\n\n  useEffect(() => {\n    (async () => {\n      try {\n        const userFromServer = await getUserById(selectedUserId);\n\n        dispatch(loadHasErrorAction(false));\n        dispatch(loadUserAction(userFromServer));\n      } catch {\n        dispatch(loadHasErrorAction(true));\n      }\n    })();\n  }, [selectedUserId]);\n\n  const handleDelete = () => {\n    dispatch(selectUserId(0));\n  };\n\n  if (hasError) {\n    return (<p>ERROR user not found</p>);\n  }\n\n  return (\n    <div className=\"CurrentUser\">\n      {!user\n        ? 'loading...'\n        : (\n          <>\n            <h2 className=\"CurrentUser__title\"><span>{`Selected user: ${selectedUserId}`}</span></h2>\n            <h3 className=\"CurrentUser__name\">{user.name}</h3>\n            <p className=\"CurrentUser__email\">{user.email}</p>\n            <p className=\"CurrentUser__phone\">{user.phone}</p>\n            <button\n              type=\"button\"\n              className=\"button TodoList__user-button--selected\"\n              onClick={handleDelete}\n            >\n              remove\n            </button>\n          </>\n        )}\n    </div>\n  );\n};\n","import { useSelector } from 'react-redux';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { getSelectedUserId } from './store/selectors';\nimport { CurrentUser } from './components/CurrentUser';\n\nexport const App: React.FC = () => {\n  const selectedUserId = useSelector(getSelectedUserId);\n\n  return (\n    <div className=\"App\">\n      <div className=\"App__sidebar\">\n        <TodoList />\n      </div>\n\n      <div className=\"App__content\">\n        <div className=\"App__content-container\">\n          {selectedUserId ? (\n            <CurrentUser />\n          ) : 'No user selected'}\n        </div>\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport store from './store';\nimport { App } from './App';\n\nconst Root = () => (\n  <Provider store={store}>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}